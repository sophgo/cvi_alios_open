## 第一部分： 基础信息
name: helloworld                                    # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: v7.5.1                                     # <必选项> 组件版本号
description: yoc helloworld                         # <必选项> 建议至少20字以上
type: solution                                      # <必选项> 组件类型，为：solution, chip, board, common, sdk

hw_info:
  cpu_id: ""
  cpu_name: ""
  vendor_name: ""
  chip_name: ""
  board_name: cv180xb_qfn
  ld_script: ""
  flash_program: ""
## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - rhino: develop
  - rhino_arch: develop
  - aos: develop
  - cli: develop
  - kv: develop
  - ulog: develop
  - csi: v7.5.1
  - debug: develop
  - aoshal: develop
  - devices: develop
  - drivers: develop
  - libc_stub: develop
  - uservice: develop
  - partition: develop
  - littlefs: v7.6.1
  - key_mgr: develop
  - sec_crypto: develop
  - posix: develop
  - drv_sdmmc: v2.0
  - lwip: develop
  - netmgr: develop
  - drv_wifi_hi3861l_fnlink: develop
  - cjson: develop
  - fatfs: cv_dev
  - vfs: develop
  - lwext4: develop
  - cv180xb_qfn: v0.0.1
  - chip_cv180x: v0.0.1
  - minialsa: v7.5.1
  - drv_snd_cv181x: v7.5.1
  - lvgl: develop
  - cvi_sensor: develop
  - rtsp: develop
#  - cvi_mw_tpu: v0.0.1
  - cherryusb: develop
  - cvi_platform: develop
  - g711: v0.0.1
  - cvi_test: develop
  - zlib: develop

  - cvi_mmf_sdk_cv180xx: develop
## 第三部分：板级信息
# hw_info:                                 # 对 solution、board、chip 三个字段的改进，统称为 hw_info 字段
#   cpu_id: cpu0
#   cpu_name: CK804EF
#   vendor_name: t-head
#   chip_name: chip_pangu                  # <可选项> 指定芯片组件名,未设置时，使用depends中 chip 第一个组件
#   board_name: pangu_cpu0_evb             # <可选项> 指定开发板组件名，未设置时，使用depends中 board 第一个组件
#   ld_script: configs/gcc_eflash.ld       # <可选项> 连接时使用 LD 脚本，当选把未设置时，使用对应的 board 的 LD 脚本
#   flash_program: bin/flash_program.elf   # <可选项> 芯片全局烧写程序
#   toolchain_prefix: csky-abiv2-elf       # <可选项> 编译器前缀
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <可选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
## solution component
# hw_info:
#   cpu_id: cpu0
#   board_name: pangu_cpu0_evb
#   cpu_name: CK805EF
#   vendor_name: thead
#   chip_name: 'chip_pangu'
#   ld_script: configs/gcc_eflash.ld.S
## board component
# hw_info:
#   chip_name: chip_pangu
#   ld_script: configs/gcc_eflash.ld
## chip component (单处理器)
# hw_info:
#   cpu_name: CK804EF
#   ld_script: configs/gcc_eflash.ld
#   toolchain_prefix: csky-abiv2-elf
#   flash_program: bin/flash_program.elf
## chip component(多处理器)
# hw_info:
#   cpu0:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
#   cpu1:
#     cpu_name: CK804EF                    # <必选项> 该芯片使用的 CPU 型号
#     ld_script: configs/gcc_eflash.ld     # <必选项> 连接时使用 LD 脚本
#     flash_program: bin/flash_program.elf # <可选项> 该CPU对应烧写程序，未指定时使用全局烧写程序
#     toolchain_prefix: csky-abiv2-elf     # <可选项> 编译器前缀
## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  include:
    - application/common/include
    - customization/include
  internal_include:

  cflag: ""
  cxxflag: ""
  asmflag: ""
  define:
  libs:
  libpath:
# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - application/*.c
  - application/common/src/*.c
  - customization/turnkey_180xb/param/*.c
  - customization/turnkey_180xb/src/*.c


## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  __CV180X__: 1
  AOS_COMP_CLI: 1
  CONFIG_DEBUG: 1
  CONFIG_DEBUG_MM: 1
  CONFIG_APP_DEBUG_JTAG: 0
  CONFIG_APP_TEST: 1
  CONFIG_SUPPORT_TPU: 1
  CONFIG_KV_ENABLE_CACHE: 1
  CONFIG_INIT_TASK_STACK_SIZE: 8192
## Demo APP Func config
  CONFIG_APP_ETHERNET_SUPPORT: 1
  CONFIG_APP_WIFI_SUPPORT: 0
  CONFIG_APP_HI3861_WIFI_SUPPORT: 0
  CONFIG_APP_RTL8723DS_WIFI_SUPPORT: 0
  CONFIG_APP_CX_CLOUD_SUPPORT: 0
  CONFIG_APP_RTSP_SUPPORT: 1
  CONFIG_RTSP_SUPPORT_UDP: 0
  CONFIG_APP_VENC_SUPPORT: 1
  CONFIG_APP_GUI_SUPPORT: 0
  CONFIG_APP_SENSOR_IR_USE: 0
  CONFIG_DEBUG_HOSTMCU_EMU_SUPPORT: 0
  CONFIG_APP_AI_SUPPORT: 0
#  UART_MODE_SYNC: 1
  CONFIG_BOARD_CV181XC: 0
  CONFIG_BOARD_CV181XH: 0
  CONFIG_BOARD_CV180XB: 1
  CONFIG_BOARD_CV180XC: 0
  CONFIG_SD_FATFS_MOUNTPOINT: "/mnt/sd"
  CLI_CONFIG_STACK_SIZE : 8192
  #ULOG_CONFIG_POP_FS: 1
  ULOG_CONFIG_ASYNC: 1   # ulog异步配置项，1表示开启异步打印，0表示同步打印
  ULOG_CONFIG_SYNC_LOG_DETAILS: 1
  ULOG_CONFIG_ASYNC_BUF_SIZE: 8192
  ULOG_CONFIG_LOG_SIZE: 512
  USE_4K_ERASE_SECTION: 1
  CONFIG_SIMPLE_FONTMOD: 1
  CONFIG_SENSOR_GCORE_GC2053: 1
  CONFIG_SENSOR_GCORE_GC2053_1L: 1
  CONFIG_SENSOR_GCORE_GC2093: 1
  CONFIG_SENSOR_GCORE_GC4653: 1
  CONFIG_SENSOR_SMS_SC200AI: 1
  CONFIG_SENSOR_SMS_SC2336: 1
  CONFIG_SENSOR_SMS_SC030IOT: 1
  CONFIG_SENSOR_SMS_SC201CS: 1
  CONFIG_SENSOR_SMS_SC201CS_SLAVE: 1
  CONFIG_SENSOR_SONY_IMX307: 1
  CONFIG_SENSOR_SONY_IMX327: 1
  CONFIG_SUPPORT_NORFLASH: 1
  CONFIG_SUPPORT_USB_DC: 1
  # CONFIG_APP_UVC_SUPPORT: 1
  CONFIG_APP_AV_COMP_SUPPORT: 1

  CONFIG_SNS0_TYPE: 15
  CONFIG_SNS1_TYPE: 0
  CONFIG_SNS2_TYPE: 0

  CONFIG_PANEL_HX8394: 0
  CONFIG_PANEL_ILI9488: 0
  CONFIG_PANEL_GC9503CV: 0

  CONFIG_VENC_TEST_CHN: 2
  CONFIG_PQTOOL_SUPPORT: 1
  CONFIG_PQBIN_USE_JSON: 0
  CONFIG_ISP_SUPPORT_PROC: 0
  CONFIG_ENABLE_FASTBOOT: 0
  CONFIG_USB_DWC2_PORT: 1
  CONFIG_USB_HS: 1
  # CONFIG_APP_UAC_SUPPORT: 1
  CONFIG_AOS_NEWLINE_SUPPORT: 1

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
