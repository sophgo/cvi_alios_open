## 第一部分： 基础信息
name: cvi_platform                                   # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: develop                                     # <必选项> 组件版本号
description: cvi业务层                               # <必选项> 建议至少20字以上
type: common                                         # <必选项> 组件类型，为：solution, chip, board, common, sdk
tag: 第三方驱动                                      # <可选项> 组件分类，缺省值： ''
keywords:                                            # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - base
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.0
#   - sdk_chip_riscv_dummy: v7.4.0
depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
  - protocol: develop
  - facekit: develop

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  include:
    - disk/sd_disk/include
    - media/include
    - param/include
    - efuse/include
    - netctrl/ethernet/include
    - netctrl/wifi/include
    - netctrl/bt/include
    - netctrl/gprs/include
    - protocol/rtsp/include
    - protocol/tcp_server/include
    - gui/littlevGL/include
    - ai/app_tdl/include
    - ai/facekit_algo_sev3x/include
    - ai/facekit_algo_zhv2x/include
    - protocol/usb_devices/usbd_class/usbd_uvc/include
    - protocol/usb_devices/usbd_class/usbd_uac/include
    - protocol/usb_devices/usbd_class/usbd_cdc_uart/include
    - protocol/usb_devices/usbd_class/usbd_cdc_rndis/include
    - protocol/usb_devices/usbd_class/usbd_hid_keyboard/include
    - protocol/usb_devices/usbd_class/usbd_winusb/include
    - protocol/usb_devices/usbd_composite/include


  internal_include:
  libs:

  libpath:

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - disk/sd_disk/src/*.c
  - media/src/*.c
  - param/src/*.c
  - util/src/*.c
  - efuse/src/*.c ? <CONFIG_ENABLE_FASTBOOT>
  - netctrl/ethernet/src/*.c ? <CONFIG_APP_ETHERNET_SUPPORT>
  - netctrl/wifi/src/*.c ? <CONFIG_APP_WIFI_SUPPORT>
  - netctrl/bt/src/*.c ? <CONFIG_APP_BT_SUPPORT>
  - netctrl/gprs/src/*.c ? <CONFIG_APP_GPRS_SUPPORT>
  - protocol/rtsp/src/*.c ? <CONFIG_APP_RTSP_SUPPORT>
  - protocol/tcp_server/src/*.c ? <CONFIG_TCP_SERVER_SUPPORT>
  - gui/littlevGL/src/*.c ? <CONFIG_APP_GUI_SUPPORT>
  - ai/app_tdl/src/*.c ? <CONFIG_APP_AI_SUPPORT>
  - ai/facekit_algo_sev3x/src/*.c ? <CONFIG_FACEKIT_SEV3X_SUPPORT>
  - ai/facekit_algo_zhv2x/src/*.c ? <CONFIG_FACEKIT_ZHV2X_SUPPORT>
  - protocol/usb_devices/usbd_class/usbd_uvc/src/*.c ? <CONFIG_USBD_UVC>
  - protocol/usb_devices/usbd_class/usbd_uac/src/*.c ? <CONFIG_USBD_UAC>
  - protocol/usb_devices/usbd_class/usbd_cdc_uart/src/*.c ? <CONFIG_USBD_CDC_UART>
  - protocol/usb_devices/usbd_class/usbd_cdc_rndis/src/*.c ? <CONFIG_USBD_CDC_RNDIS>
  - protocol/usb_devices/usbd_class/usbd_hid_keyboard/src/*.c ? <CONFIG_USBD_HID_KEYBOARD>
  - protocol/usb_devices/usbd_class/usbd_winusb/src/*.c ? <CONFIG_USBD_WINUSB>
  - protocol/usb_devices/usbd_composite/src/*.c ? <CONFIG_SUPPORT_USB_DC>

# - ./hichannel_test/
## 第五部分：配置信息
def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
  CONFIG_APP_ISP_BYPASS: 1
  CONFIG_USBD_UVC_NUM: 1                   # UVC 设备 Sensor 的数量
  CONFIG_UVC_MJPEG_BITRATE: 20480          # UVC 推流时，设置视频编码器 MJPEG 的码率，单位 kbps
  CONFIG_UVC_H264_H265_BITRATE: 4096       # UVC 推流时，设置视频编码器 H264/H265 的码率，单位 kbps
  CONFIG_UVC_CROP_BEFORE_SCALE: 0          # UVC 推流时，是否对视频进行裁剪，以保证缩放前后长宽比一致（可能会有视野丢失）
  CONFIG_UVC_COMM_FUNC: 0                  # USB camera 使能亮度、色调、对比度等调整功能

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
install:
  - dest: "include/devices"
    source:

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
