
## 第一部分： 基础信息
name: debug                                         # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: develop                                    # <必选项> 组件版本号
description: coredump and debug cmds support        # <必选项> 建议至少20字以上
type: common                                        # <必选项> 组件类型，为：solution, chip, board, common, sdk
license: Apache license v2.0                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.0
#   - sdk_chip_riscv_dummy: v7.4.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.4.0
#   - aos: v7.4.0

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  asmflag: '-DAOS_COMP_DEBUG'
  include:
    - include/
  internal_include:
    - include/debug
    - src/arch
  # libpath:
  #   - libs/<arch>/<cpu_num>/
  # libs:
  #   - debug_panic

source_file:
  - src/debug_panic.c
  - src/debug_print.c
  - src/debug_overview.c
  - src/debug_backtrace.c
  - src/debug_infoget.c
  - src/debug_cpuusage.c
  - src/debug_test.c ? <DEBUG_TEST_CMDS_ENABLE>
  - src/debug_dumpsys.c ? <AOS_COMP_CLI>
  - src/debug_cli_cmd.c ? <AOS_COMP_CLI>
  - src/debug_lastword.c ? <DEBUG_LAST_WORD_ENABLE>
  - src/debug.c
  - src/debug_weak.c
  - src/arch/<arch>/<cpu_num>/panic.c
  - src/arch/<arch>/<cpu_num>/backtrace.c
  #- example/*.c ? <AOS_COMP_CLI>

## 第五部分：配置信息
def_config:
  AOS_COMP_DEBUG: 1
  DEBUG_PANIC_PRT_INT: 1

  # cpuusage feature config
  DEBUG_CPUUSAGE_RECODE_TO_FILE_ENABLE: 0
  DEBUG_CPUUSAGE_MAX_TASK: 80
  DEBUG_CPUUSAGE_FILE_NAME: "/data/cpuusage"

  # last_word feature config
  DEBUG_LAST_WORD_ENABLE: 0
  DEBUG_LOG_FILE_NUM: 10
  DEBUG_LASTWORD_RAM_ADDR: 0
  DEBUG_LASTWORD_REGION_LEN: 0x4000
  DEBUG_LOG_DIR_NAME: "/data/crash_reports"
  DEBUG_CONFIG_LOG_FILE_NAME: "/data/crash_reports/crash_report"
  DEBUG_CONFIG_LOG_FILE_INDEX: "/data/crash_reports/log_file_index"

  # ulog flush
  DEBUG_ULOG_FLUSH: 0

  # debug cmds
  DEBUG_TEST_CMDS_ENABLE: 0

## 第六部分：安装信息
install:
  - dest: include/debug                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
    source:                              # 安装源列表
     - include/debug/*.h                           # 支持通配符，相对路径

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
