#ifndef _UTILS_CV_IMGPROC_TYPES_C_H_
#define _UTILS_CV_IMGPROC_TYPES_C_H_

// clang-format off

/** Constants for color conversion */
enum
{
  CV_BGR2BGRA    = 0,
  CV_RGB2RGBA    = CV_BGR2BGRA,

  CV_BGRA2BGR    = 1,
  CV_RGBA2RGB    = CV_BGRA2BGR,

  CV_BGR2RGBA    = 2,
  CV_RGB2BGRA    = CV_BGR2RGBA,

  CV_RGBA2BGR    = 3,
  CV_BGRA2RGB    = CV_RGBA2BGR,

  CV_BGR2RGB     = 4,
  CV_RGB2BGR     = CV_BGR2RGB,

  CV_BGRA2RGBA   = 5,
  CV_RGBA2BGRA   = CV_BGRA2RGBA,

  CV_BGR2GRAY    = 6,
  CV_RGB2GRAY    = 7,
  CV_GRAY2BGR    = 8,
  CV_GRAY2RGB    = CV_GRAY2BGR,
  CV_GRAY2BGRA   = 9,
  CV_GRAY2RGBA   = CV_GRAY2BGRA,
  CV_BGRA2GRAY   = 10,
  CV_RGBA2GRAY   = 11,

  CV_BGR2BGR565  = 12,
  CV_RGB2BGR565  = 13,
  CV_BGR5652BGR  = 14,
  CV_BGR5652RGB  = 15,
  CV_BGRA2BGR565 = 16,
  CV_RGBA2BGR565 = 17,
  CV_BGR5652BGRA = 18,
  CV_BGR5652RGBA = 19,

  CV_GRAY2BGR565 = 20,
  CV_BGR5652GRAY = 21,

  CV_BGR2BGR555  = 22,
  CV_RGB2BGR555  = 23,
  CV_BGR5552BGR  = 24,
  CV_BGR5552RGB  = 25,
  CV_BGRA2BGR555 = 26,
  CV_RGBA2BGR555 = 27,
  CV_BGR5552BGRA = 28,
  CV_BGR5552RGBA = 29,

  CV_GRAY2BGR555 = 30,
  CV_BGR5552GRAY = 31,

  CV_BGR2XYZ     = 32,
  CV_RGB2XYZ     = 33,
  CV_XYZ2BGR     = 34,
  CV_XYZ2RGB     = 35,

  CV_BGR2YCrCb   = 36,
  CV_RGB2YCrCb   = 37,
  CV_YCrCb2BGR   = 38,
  CV_YCrCb2RGB   = 39,

  CV_BGR2HSV     = 40,
  CV_RGB2HSV     = 41,

  CV_BGR2Lab     = 44,
  CV_RGB2Lab     = 45,

  CV_BayerBG2BGR = 46,
  CV_BayerGB2BGR = 47,
  CV_BayerRG2BGR = 48,
  CV_BayerGR2BGR = 49,

  CV_BayerBG2RGB = CV_BayerRG2BGR,
  CV_BayerGB2RGB = CV_BayerGR2BGR,
  CV_BayerRG2RGB = CV_BayerBG2BGR,
  CV_BayerGR2RGB = CV_BayerGB2BGR,

  CV_BGR2Luv     = 50,
  CV_RGB2Luv     = 51,
  CV_BGR2HLS     = 52,
  CV_RGB2HLS     = 53,

  CV_HSV2BGR     = 54,
  CV_HSV2RGB     = 55,

  CV_Lab2BGR     = 56,
  CV_Lab2RGB     = 57,
  CV_Luv2BGR     = 58,
  CV_Luv2RGB     = 59,
  CV_HLS2BGR     = 60,
  CV_HLS2RGB     = 61,

  CV_BayerBG2BGR_VNG = 62,
  CV_BayerGB2BGR_VNG = 63,
  CV_BayerRG2BGR_VNG = 64,
  CV_BayerGR2BGR_VNG = 65,

  CV_BayerBG2RGB_VNG = CV_BayerRG2BGR_VNG,
  CV_BayerGB2RGB_VNG = CV_BayerGR2BGR_VNG,
  CV_BayerRG2RGB_VNG = CV_BayerBG2BGR_VNG,
  CV_BayerGR2RGB_VNG = CV_BayerGB2BGR_VNG,

  CV_BGR2HSV_FULL = 66,
  CV_RGB2HSV_FULL = 67,
  CV_BGR2HLS_FULL = 68,
  CV_RGB2HLS_FULL = 69,

  CV_HSV2BGR_FULL = 70,
  CV_HSV2RGB_FULL = 71,
  CV_HLS2BGR_FULL = 72,
  CV_HLS2RGB_FULL = 73,

  CV_LBGR2Lab     = 74,
  CV_LRGB2Lab     = 75,
  CV_LBGR2Luv     = 76,
  CV_LRGB2Luv     = 77,

  CV_Lab2LBGR     = 78,
  CV_Lab2LRGB     = 79,
  CV_Luv2LBGR     = 80,
  CV_Luv2LRGB     = 81,

  CV_BGR2YUV      = 82,
  CV_RGB2YUV      = 83,
  CV_YUV2BGR      = 84,
  CV_YUV2RGB      = 85,

  CV_BayerBG2GRAY = 86,
  CV_BayerGB2GRAY = 87,
  CV_BayerRG2GRAY = 88,
  CV_BayerGR2GRAY = 89,

  //YUV 4:2:0 formats family
  CV_YUV2RGB_NV12 = 90,
  CV_YUV2BGR_NV12 = 91,
  CV_YUV2RGB_NV21 = 92,
  CV_YUV2BGR_NV21 = 93,
  CV_YUV420sp2RGB = CV_YUV2RGB_NV21,
  CV_YUV420sp2BGR = CV_YUV2BGR_NV21,

  CV_YUV2RGBA_NV12 = 94,
  CV_YUV2BGRA_NV12 = 95,
  CV_YUV2RGBA_NV21 = 96,
  CV_YUV2BGRA_NV21 = 97,
  CV_YUV420sp2RGBA = CV_YUV2RGBA_NV21,
  CV_YUV420sp2BGRA = CV_YUV2BGRA_NV21,

  CV_YUV2RGB_YV12 = 98,
  CV_YUV2BGR_YV12 = 99,
  CV_YUV2RGB_IYUV = 100,
  CV_YUV2BGR_IYUV = 101,
  CV_YUV2RGB_I420 = CV_YUV2RGB_IYUV,
  CV_YUV2BGR_I420 = CV_YUV2BGR_IYUV,
  CV_YUV420p2RGB = CV_YUV2RGB_YV12,
  CV_YUV420p2BGR = CV_YUV2BGR_YV12,

  CV_YUV2RGBA_YV12 = 102,
  CV_YUV2BGRA_YV12 = 103,
  CV_YUV2RGBA_IYUV = 104,
  CV_YUV2BGRA_IYUV = 105,
  CV_YUV2RGBA_I420 = CV_YUV2RGBA_IYUV,
  CV_YUV2BGRA_I420 = CV_YUV2BGRA_IYUV,
  CV_YUV420p2RGBA = CV_YUV2RGBA_YV12,
  CV_YUV420p2BGRA = CV_YUV2BGRA_YV12,

  CV_YUV2GRAY_420 = 106,
  CV_YUV2GRAY_NV21 = CV_YUV2GRAY_420,
  CV_YUV2GRAY_NV12 = CV_YUV2GRAY_420,
  CV_YUV2GRAY_YV12 = CV_YUV2GRAY_420,
  CV_YUV2GRAY_IYUV = CV_YUV2GRAY_420,
  CV_YUV2GRAY_I420 = CV_YUV2GRAY_420,
  CV_YUV420sp2GRAY = CV_YUV2GRAY_420,
  CV_YUV420p2GRAY = CV_YUV2GRAY_420,

  //YUV 4:2:2 formats family
  CV_YUV2RGB_UYVY = 107,
  CV_YUV2BGR_UYVY = 108,
  //CV_YUV2RGB_VYUY = 109,
  //CV_YUV2BGR_VYUY = 110,
  CV_YUV2RGB_Y422 = CV_YUV2RGB_UYVY,
  CV_YUV2BGR_Y422 = CV_YUV2BGR_UYVY,
  CV_YUV2RGB_UYNV = CV_YUV2RGB_UYVY,
  CV_YUV2BGR_UYNV = CV_YUV2BGR_UYVY,

  CV_YUV2RGBA_UYVY = 111,
  CV_YUV2BGRA_UYVY = 112,
  //CV_YUV2RGBA_VYUY = 113,
  //CV_YUV2BGRA_VYUY = 114,
  CV_YUV2RGBA_Y422 = CV_YUV2RGBA_UYVY,
  CV_YUV2BGRA_Y422 = CV_YUV2BGRA_UYVY,
  CV_YUV2RGBA_UYNV = CV_YUV2RGBA_UYVY,
  CV_YUV2BGRA_UYNV = CV_YUV2BGRA_UYVY,

  CV_YUV2RGB_YUY2 = 115,
  CV_YUV2BGR_YUY2 = 116,
  CV_YUV2RGB_YVYU = 117,
  CV_YUV2BGR_YVYU = 118,
  CV_YUV2RGB_YUYV = CV_YUV2RGB_YUY2,
  CV_YUV2BGR_YUYV = CV_YUV2BGR_YUY2,
  CV_YUV2RGB_YUNV = CV_YUV2RGB_YUY2,
  CV_YUV2BGR_YUNV = CV_YUV2BGR_YUY2,

  CV_YUV2RGBA_YUY2 = 119,
  CV_YUV2BGRA_YUY2 = 120,
  CV_YUV2RGBA_YVYU = 121,
  CV_YUV2BGRA_YVYU = 122,
  CV_YUV2RGBA_YUYV = CV_YUV2RGBA_YUY2,
  CV_YUV2BGRA_YUYV = CV_YUV2BGRA_YUY2,
  CV_YUV2RGBA_YUNV = CV_YUV2RGBA_YUY2,
  CV_YUV2BGRA_YUNV = CV_YUV2BGRA_YUY2,

  CV_YUV2GRAY_UYVY = 123,
  CV_YUV2GRAY_YUY2 = 124,
  //CV_YUV2GRAY_VYUY = CV_YUV2GRAY_UYVY,
  CV_YUV2GRAY_Y422 = CV_YUV2GRAY_UYVY,
  CV_YUV2GRAY_UYNV = CV_YUV2GRAY_UYVY,
  CV_YUV2GRAY_YVYU = CV_YUV2GRAY_YUY2,
  CV_YUV2GRAY_YUYV = CV_YUV2GRAY_YUY2,
  CV_YUV2GRAY_YUNV = CV_YUV2GRAY_YUY2,

  // alpha premultiplication
  CV_RGBA2mRGBA = 125,
  CV_mRGBA2RGBA = 126,

  CV_RGB2YUV_I420 = 127,
  CV_BGR2YUV_I420 = 128,
  CV_RGB2YUV_IYUV = CV_RGB2YUV_I420,
  CV_BGR2YUV_IYUV = CV_BGR2YUV_I420,

  CV_RGBA2YUV_I420 = 129,
  CV_BGRA2YUV_I420 = 130,
  CV_RGBA2YUV_IYUV = CV_RGBA2YUV_I420,
  CV_BGRA2YUV_IYUV = CV_BGRA2YUV_I420,
  CV_RGB2YUV_YV12  = 131,
  CV_BGR2YUV_YV12  = 132,
  CV_RGBA2YUV_YV12 = 133,
  CV_BGRA2YUV_YV12 = 134,

  // Edge-Aware Demosaicing
  CV_BayerBG2BGR_EA = 135,
  CV_BayerGB2BGR_EA = 136,
  CV_BayerRG2BGR_EA = 137,
  CV_BayerGR2BGR_EA = 138,

  CV_BayerBG2RGB_EA = CV_BayerRG2BGR_EA,
  CV_BayerGB2RGB_EA = CV_BayerGR2BGR_EA,
  CV_BayerRG2RGB_EA = CV_BayerBG2BGR_EA,
  CV_BayerGR2RGB_EA = CV_BayerGB2BGR_EA,

  CV_COLORCVT_MAX  = 139
};

/** Threshold types */
enum
{
  CV_THRESH_BINARY      = 0,  /**< value = value > threshold ? max_value : 0       */
  CV_THRESH_BINARY_INV  = 1,  /**< value = value > threshold ? 0 : max_value       */
  CV_THRESH_TRUNC       = 2,  /**< value = value > threshold ? threshold : value   */
  CV_THRESH_TOZERO      = 3,  /**< value = value > threshold ? value : 0           */
  CV_THRESH_TOZERO_INV  = 4,  /**< value = value > threshold ? 0 : value           */
  CV_THRESH_MASK        = 7,
  CV_THRESH_OTSU        = 8,  /**< use Otsu algorithm to choose the optimal threshold value;
                                 combine the flag with one of the above CV_THRESH_* values */
  CV_THRESH_TRIANGLE    = 16  /**< use Triangle algorithm to choose the optimal threshold value;
                                 combine the flag with one of the above CV_THRESH_* values, but not
                                 with CV_THRESH_OTSU */
};

/*
Internal structure that is used for sequential retrieving contours from the image.
It supports both hierarchical and plane variants of Suzuki algorithm.
*/
typedef struct _CvContourScanner* CvContourScanner;

/** Contour retrieval modes */
enum
{
  CV_RETR_EXTERNAL  = 0,
  CV_RETR_LIST      = 1,
  CV_RETR_CCOMP     = 2,
  CV_RETR_TREE      = 3,
  CV_RETR_FLOODFILL = 4
};

/** Contour approximation methods */
enum
{
  CV_CHAIN_CODE = 0,
  CV_CHAIN_APPROX_NONE      = 1,
  CV_CHAIN_APPROX_SIMPLE    = 2,
  CV_CHAIN_APPROX_TC89_L1   = 3,
  CV_CHAIN_APPROX_TC89_KCOS = 4,
  CV_LINK_RUNS = 5
};

// clang-format on

#endif  // _UTILS_CV_IMGPROC_TYPES_C_H_