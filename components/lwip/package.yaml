
## 第一部分： 基础信息
name: lwip                                          # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
version: develop                                    # <必选项> 组件版本号
description: A Lightweight TCP/IP stack             # <必选项> 建议至少20字以上
type: common                                        # <必选项> 组件类型，为：solution, chip, board, common, sdk
tag: 核心模块                                       # <可选项> 组件分类，缺省值： ''
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - base
license: BSD                                        # <可选项> 源代码的许可证，要确保所有代码、文件的许可证不冲突。如：MIT，Apache license v2.0，BSD

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.0
#   - sdk_chip_riscv_dummy: v7.4.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.4.0
#   - aos: v7.4.0

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  cflag: '-Wno-address -Wno-unused-but-set-variable'
  include:
    - include

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
  - "core/init.c"
  - "core/def.c"
  - "core/dns.c"
  - "core/inet_chksum.c"
  - "core/ip.c"
  - "core/mem.c"
  - "core/memp.c"
  - "core/netif.c"
  - "core/pbuf.c"
  - "core/raw.c"
  - "core/stats.c"
  - "core/sys.c"
  - "core/tcp.c"
  - "core/tcp_in.c"
  - "core/tcp_out.c"
  - "core/timeouts.c"
  - "core/udp.c"
  - "core/altcp_alloc.c"
  - "core/altcp_tcp.c"
  - "core/altcp.c"
  - "core/ipv4/autoip.c"
  - "core/ipv4/dhcp.c"
  - "core/ipv4/etharp.c"
  - "core/ipv4/icmp.c"
  - "core/ipv4/igmp.c"
  - "core/ipv4/ip4_frag.c"
  - "core/ipv4/ip4.c"
  - "core/ipv4/ip4_addr.c"
  - "core/ipv6/dhcp6.c"
  - "core/ipv6/ethip6.c"
  - "core/ipv6/icmp6.c"
  - "core/ipv6/inet6.c"
  - "core/ipv6/ip6.c"
  - "core/ipv6/ip6_addr.c"
  - "core/ipv6/ip6_frag.c"
  - "core/ipv6/mld6.c"
  - "core/ipv6/nd6.c"
  - "api/api_lib.c"
  - "api/api_msg.c"
  - "api/err.c"
  - "api/netbuf.c"
  - "api/netdb.c"
  - "api/netifapi.c"
  - "api/sockets.c"
  - "api/tcpip.c"
  - "api/if_api.c"
  - "netif/ethernet.c"
  - "netif/slipif.c"
  - "netif/bridgeif.c"
  - "netif/bridgeif_fdb.c"
  - "netif/lowpan6_common.c"
  - "netif/lowpan6.c"
  - "netif/lowpan6_ble.c"
  - "netif/ppp/auth.c"
  - "netif/ppp/ccp.c"
  - "netif/ppp/chap-md5.c"
  - "netif/ppp/chap_ms.c"
  - "netif/ppp/chap-new.c"
  - "netif/ppp/demand.c"
  - "netif/ppp/eap.c"
  - "netif/ppp/ecp.c"
  - "netif/ppp/eui64.c"
  - "netif/ppp/fsm.c"
  - "netif/ppp/ipcp.c"
  - "netif/ppp/ipv6cp.c"
  - "netif/ppp/lcp.c"
  - "netif/ppp/magic.c"
  - "netif/ppp/mppe.c"
  - "netif/ppp/multilink.c"
  - "netif/ppp/ppp.c"
  - "netif/ppp/pppapi.c"
  - "netif/ppp/pppcrypt.c"
  - "netif/ppp/pppoe.c"
  - "netif/ppp/pppol2tp.c"
  - "netif/ppp/pppos.c"
  - "netif/ppp/upap.c"
  - "netif/ppp/utils.c"
  - "netif/ppp/vj.c"
  - "netif/ppp/polarssl/arc4.c"
  - "netif/ppp/polarssl/des.c"
  - "netif/ppp/polarssl/md4.c"
  - "netif/ppp/polarssl/md5.c"
  - "netif/ppp/polarssl/sha1.c"
  - "apps/lwiperf/lwiperf.c"
  - "apps/sntp/sntp.c"
  - "apps/mdns/mdns.c"
  - "apps/netbiosns/netbiosns.c"
  - "apps/tftp/tftp.c"
  - "apps/tftp/tftp_init.c"
  - "apps/mqtt/mqtt.c"
  - "apps/dhcpd/dhcps.c"
  - "apps/ping/ping.c"
  - "apps/ping/ping_v4.c"
  - "apps/ping/ping_v6.c"
  - "port/sys_arch.c"
  - "cli/*.c  ? <AOS_COMP_CLI>"

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
def_config:
  CONFIG_TCPIP: 1
  CONFIG_AOS_LWIP: 1

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
install:
  - dest: "include/arch"
    source:
      - "include/arch/*.h"
  - dest: "include/arpa"
    source:
      - "include/arpa/*.h"
  - dest: "include/lwip"
    source:
      - "include/lwip/*.h"
  - dest: "include/lwip/apps"
    source:
      - "include/lwip/apps/*.h"
  - dest: "include/lwip/priv"
    source:
      - "include/lwip/priv/*.h"
  - dest: "include/lwip/prot"
    source:
      - "include/lwip/prot/*.h"
  - dest: "include/netif"
    source:
      - "include/netif/*.h"
  - dest: "include/netif/ppp"
    source:
      - "include/netif/ppp/*.h"
  - dest: "include/posix"
    source:
      - "include/posix/*.h"
  - dest: "include/sys"
    source:
      - "include/sys/*.h"

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
