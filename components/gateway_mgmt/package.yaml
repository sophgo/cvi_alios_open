## 第一部分： 基础信息
name: gateway_mgmt
version: develop
description: gateway management
type: common
tag: 核心模块
keywords:
  - base
license: Apache license v2.0
## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# sdk_chip:                                # <可选项> 该组件依赖sdk组件，合理的依赖才能保证组件能编译、使用
#   - sdk_chip_csky_dummy: v7.4.y
#   - sdk_chip_riscv_dummy: v7.4.y
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends: ~
## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  include:
    - include
  internal_include:
    - src/inc
  cflag: ""
  cxxflag: ""
  asmflag: ""
  define: ~
  libs:
    - gateway_mgmt_prebuild
  libpath:
    - libs/<cpu>
# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:

## 第五部分：配置信息
def_config:                              # 组件的可配置项
#mesh config
# BLE MESH Config
  CONFIG_BT_MESH_CFG_CLI: 1
  CONFIG_BT_MESH_GATT_PROXY: 1
  CONFIG_BT_MESH_HEALTH_CLI: 1
  CONFIG_BT_MESH_PB_GATT: 1
  CONFIG_BT_MESH_PROVISIONER: 1
  CONFIG_BT_MESH_RELAY: 1
  CONFIG_BT_MESH_APP_KEY_COUNT: 2
  CONFIG_BT_MESH_SUBNET_COUNT: 2
  CONFIG_BT_MESH_MAX_PROV_NODES: 256
  CONFIG_BT_MESH_MAX_STORED_NODES: 256
  CONFIG_BT_MESH_HB_SRC_UNASSIGNED_ENABLE: 1
  CONFIG_BT_MESH_CRPL: 256
  CONFIG_BT_MESH_USE_SIG_MODEL: 1
  CONFIG_BT_MESH_MODEL_BLOB_CLI: 1
  CONFIG_BT_MESH_MODEL_GROUP_COUNT: 10
  CONFIG_BT_MESH_TX_SDU_MAX: 512
  CONFIG_BT_MESH_MSG_CACHE_SIZE: 60
  CONFIG_BT_MESH_MODEL_LIGHT_CTL_CLI: 1
  CONFIG_BT_MESH_MODEL_LIGHT_LIGHTNESS_CLI: 1
  CONFIG_BT_MESH_MODEL_VENDOR_CLI: 1
  CONFIG_BT_MESH_MODEL_VENDOR_SRV: 1
  CONFIG_BT_MESH_MODEL_GEN_LEVEL_CLI: 1
  CONFIG_BT_MESH_MODEL_GEN_ONOFF_CLI: 1
  CONFIG_BT_MESH_MODEL_GEN_ONOFF_SRV: 1
  CONFIG_BT_MESH_LPM: 1
  #CONFIG_BT_MESH_EXT_ADV: 1
  #CONFIG_BT_MESH_TX_SEG_MSG_COUNT: 5
  #CONFIG_BT_MESH_RX_SEG_MSG_COUNT: 5
  CONFIG_BT_MESH_ADV_BUF_COUNT: 20
  #CONFIG_BLOB_CLI_DEFAULT_TTL: 2
  #CONFIG_MAX_BLOB_RECEIVERS_SIZE: 32
# OTA Config
  CONFIG_OTA_SERVER: 1
  CONFIG_OTA_SERVER_TRANS_GATT: 1
  CONFIG_OTA_SERVER_TRANS_HCI_UART: 1
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y
#def_config: ~
## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相对路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
install:
  - dest: include
    source:
      - include*.h

yoc_version: ~
author: ""
#defconfig:

link_config:
  path: ~
  library: ~
suitableChip: ~
field: ~
hidden: ~
homepage: ~
soc_config: ~
## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相对路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
